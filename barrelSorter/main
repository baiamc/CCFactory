os.loadAPI("apis/const")
os.loadAPI("apis/es")
os.loadAPI("apis/slave")
os.loadAPI("apis/utils")
os.loadAPI("apis/invMgr")

local sortType,extractType,params,modem,sorter,invData

modem = utils.findPeripheral("modem")
sorter = utils.findPeripheral("interactiveSorter")

-- Event handler for when an item enters an interactive sorter on a barrel
function doSort(event, currentItem, itemAmt)
	if currentItem == sortType then
		_, currentAmt = next(sorter.list(const.dir.down))
		-- Prevent us from overflowing the barrel
		if currentAmt > 64 then
			sorter.sort(params.extractDir)
		else
			sorter.sort(const.dir.down)
			invMgr.addItem(sortType, itemAmt)
		end
	end
end

-- Event handler called when an item needs to be extracted
function doExtract(message)
	local extractAmt, available, stacks
	extractAmt = message.amount
	stacks = 0
	while extractAmt > 64 and next(sorter.list(const.dir.up))[2] == 64 do
		sorter.extract(const.dir.up, extractType, params.extractDir, 64)
		extractAmt = extractAmt - 64
		stacks = stacks + 1
	end
	_, available = next(sorter.list(const.dir.up))
	extractAmt = math.min(extractAmt, available)
	sorter.extract(const.dir.up, extractType, params.extractDir, extractAmt)
	invMgr.removeItem(sortType, stacks * 64 + extractAmt)

end

-- Event handler called when a new item type is added to the system
-- Need to let the extract computer know.
function itemAdded()
	return utils.modemHandler(const.channel.extract, "itemAdded", function (message)
		if extractType == nil then
			invData = sorter.list(const.dir.up)
			if invData then
				extractType = next(invData)
				es.addHandler("modem_message", doExtract())
			end
		end
	end)
end

-- Called when an item is to be removed completely from storage
function removeItem()
	--return utils.modemHandler(const)
end


params = slave.init()

-- Clear the machine on startup, clears any clogs
sorter.sort(params.extractDir)

-- Setup sorting, regardless of there being an inventory below or not
invData = sorter.list(const.dir.down)
sortType = nil
if invData then
	sortType = next(invData)
end
es.addHandler("isort_item", doSort)

-- Setup extracting

invData = sorter.list(const.dir.up)
if invData then
	extractType = next(invData)
	es.modemHandler(const.channel.extract, extractType, doExtract)
end

modem.open(const.channel.extract)
es.start()




