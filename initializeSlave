-- Initializes a slave computer.  Requires a running master server.

-- Usage: initializeSlave [type] [params...]

local params = { ... }

-- Validate usage
if #params < 1 then
	print("Usage: initializeSlave [type] (params)")
	return nil
end

local modem, side
local sides = {"top", "bottom", "left", "right", "back"}
for _, side in pairs(sides) do
	if peripheral.getType(side) == "modem" then
		modem = peripheral.wrap(side)
	end
end

if modem == nil then
	print("ERROR!  Could not find modem!")
end

local message = {
	type = "getFiles",
	computerType = table.remove(params,1)
}

os.setComputerLabel(message.computerType)
fs.makeDir("apis")

local respChannel = 10000 + os.getComputerID()

modem.open(respChannel)
modem.transmit(1, respChannel, textutils.serialize(message))

local channel, code
while channel ~= respChannel do
	_, _, channel, _, code = os.pullEvent("modem_message")
end
code = textutils.unserialize(code)
local filename, text
for filename, text in pairs(code) do
	local handle = fs.open(filename, "w")
	handle.write(text)
	handle.close()
end

print("Code downloaded sucessfully.")

if #params > 0 then
	shell.run("config", unpack(params))
end


